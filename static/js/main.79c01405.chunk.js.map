{"version":3,"sources":["components/SearchMovies.js","components/MovieCard.js","App.js","reportWebVitals.js","index.js"],"names":["SearchMovies","handleSubmit","useState","query","setQuery","onSubmit","e","preventDefault","className","htmlFor","onChange","target","value","type","name","placeholder","MovieCard","movie","src","poster_path","alt","title","release_date","vote_average","overview","App","movies","setMovies","searchMovies","a","url","fetch","res","json","data","results","console","error","filter","map","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEe,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,aAAe,EAEvBC,mBAAS,IAFc,mBAE1CC,EAF0C,KAEnCC,EAFmC,KAejD,OACI,mCACD,uBACCC,SARW,SAACC,GACZA,EAAEC,iBACFN,EAAaE,IAObK,UAAU,OAFX,UAII,uBACCC,QAAQ,QACRD,UAAU,yBAFX,4BAOA,uBACCE,SAxBa,SAACJ,GAClBF,EAASE,EAAEK,OAAOC,QAwBdJ,UAAU,oFACVK,KAAK,OACLC,KAAK,QACLC,YAAY,4BACZH,MAAOT,IAGR,wBACCK,UAAU,mJACVK,KAAK,SAFN,yBCrCI,SAASG,EAAT,GAA6B,IAATC,EAAQ,EAARA,MAC/B,OACI,sBAAKT,UAAU,0CAAf,UACI,qBAAKU,IAAG,yCAAoCD,EAAME,aAAeC,IAAKH,EAAMI,MAAOb,UAAU,0BAC7F,oBAAIA,UAAU,iBAAd,SAAgCS,EAAMI,QACtC,wBAAOb,UAAU,8BAAjB,4BAA+DS,EAAMK,aAArE,OACA,wBAAOd,UAAU,8BAAjB,4BAA+DS,EAAMM,aAArE,OACA,oBAAGf,UAAU,mCAAb,cAAkDS,EAAMO,SAAxD,UC4BGC,MAjCf,WAAgB,IAAD,EAEevB,mBAAS,IAFxB,mBAENwB,EAFM,KAEEC,EAFF,KAKPC,EAAY,uCAAG,WAAOzB,GAAP,mBAAA0B,EAAA,6DAEbC,EAFa,mGAEqF3B,GAFrF,kBAKG4B,MAAMD,GALT,cAKTE,EALS,gBAMIA,EAAIC,OANR,OAMTC,EANS,OAOfP,EAAUO,EAAKC,SAPA,kDASXC,QAAQC,MAAR,MATW,0DAAH,sDAalB,OACE,sBAAK7B,UAAU,6CAAf,UACE,oBAAIA,UAAU,uDAAd,gCAEA,cAACR,EAAD,CAAcC,aAAc2B,IAE5B,qBAAKpB,UAAU,qGAAf,SACSkB,EAAOY,QAAO,SAAArB,GAAK,OAAIA,EAAME,eAAaoB,KAAI,SAAAtB,GAAK,OACpD,cAACD,EAAD,CAAWC,MAAOA,GAAYA,EAAMuB,aClBnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79c01405.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function SearchMovies({handleSubmit}) {\n\n    const [query, setQuery] = useState(\"\") // user input\n\n    // update query state\n    const handleChange = (e) => {\n        setQuery(e.target.value)\n    }\n    \n    //emit event to handleSubmit prop with query value\n    const search = (e)=>{ \n        e.preventDefault();\n        handleSubmit(query)\n    }\n    \n    return (\n        <>\n       <form\n        onSubmit={search} \n        className=\"grid\"\n       >\n           <label \n            htmlFor=\"query\"\n            className=\"mb-1 uppercase text-sm\"\n           >\n            find a movie :\n           </label>\n\n           <input\n            onChange={handleChange} \n            className=\"text-lg py-2 px-8 leading-10 rounded-full border border-gray-50 border-solid mb-4\"\n            type=\"text\" \n            name=\"query\" \n            placeholder=\"title, author, actor ...!\"\n            value={query}\n            />\n\n           <button\n            className=\"bg-gray-600 py-2 border border-solid border-gray-900 rounded-full text-lg font-semibold cursor-pointer hover:bg-gray-700 transition duration-500\" \n            type=\"submit\"\n           >\n            Search\n           </button>\n       </form>\n       </>\n    )\n}\n","import React from 'react'\n\nexport default function MovieCard({movie}) {\n    return (\n        <div className=\" block bg-white p-5 rounded-2xl mx-auto\">\n            <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} className=\"block mx-auto rounded\"/>\n            <h1 className=\"mt-2 font-bold\">{movie.title}</h1>\n            <small className=\"block text-xm text-gray-400\">release date : {movie.release_date} </small>\n            <small className=\"block text-xm text-gray-400\">vote average : {movie.vote_average} </small>\n            <p className=\"block mt-5 text-xs text-gray-500\"> {movie.overview} </p>\n        </div>\n    )\n}\n","import  SearchMovies  from \"./components/SearchMovies\"\nimport MovieCard from \"./components/MovieCard\"\nimport {useState} from 'react'\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]); //movies list\n \n  //searching for movies with query, update movies list,\n  const searchMovies = async (query) => {\n    \n    const url = `https://api.themoviedb.org/3/search/movie?api_key=6aa9cb9848a4243f16ae50662ffe4343&query=${query}`\n    \n    try {\n        const res = await fetch(url);\n        const data = await res.json();\n        setMovies(data.results);\n        }catch(err){\n            console.error(err);\n        }\n}\n  \n  return (\n    <div className=\"lg:container md:max-w-2xl md:mx-auto mx-20\">\n      <h1 className=\"text-5xl mt-10 text-center font-bold text-purple-800\">React Movie Search</h1>\n\n      <SearchMovies handleSubmit={searchMovies}/>\n\n      <div className=\"bg-gray-200 mt-10 mb-20 p-10 rounded-2xl max-w-7xl mx-auto grid grid-cols-1  md:grid-cols-2  gap-4\">\n              {movies.filter(movie => movie.poster_path).map(movie => (\n              <MovieCard movie={movie} key={movie.id}/>         \n              ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}